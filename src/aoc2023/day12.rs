// Partially generated by ChatGPT.
// https://chat.openai.com/share/dde4d3bb-88f1-454b-9ca7-65382312b1af

use crate::Solution;
use std::collections::HashMap;

struct Record {
    spec: String,
    pieces: Vec<usize>,
    cache: HashMap<(usize, usize), usize>,
}

impl Record {
    fn new(spec: String, pieces: Vec<usize>) -> Self {
        Self {
            spec,
            pieces,
            cache: HashMap::new(),
        }
    }

    fn place(&mut self, pos: usize, piece: usize) -> usize {
        if let Some(&result) = self.cache.get(&(pos, piece)) {
            return result;
        }

        if piece == self.pieces.len() {
            return if self.spec[pos..].chars().all(|c| c == '.' || c == '?') {
                1
            } else {
                0
            };
        }

        let cur_piece = self.pieces[piece];

        if cur_piece > self.spec.len() - pos {
            0
        } else if cur_piece == self.spec.len() - pos {
            if self.spec[pos..].chars().all(|c| c == '#' || c == '?')
                && piece == self.pieces.len() - 1
            {
                1
            } else {
                0
            }
        } else {
            let mut total = 0;

            for i in pos..=self.spec.len() - cur_piece {
                if self.spec[i..i + cur_piece]
                    .chars()
                    .all(|c| c == '#' || c == '?')
                {
                    if i + cur_piece == self.spec.len() {
                        total += self.place(self.spec.len(), piece + 1);
                    } else if self.spec.chars().nth(i + cur_piece) == Some('.')
                        || self.spec.chars().nth(i + cur_piece) == Some('?')
                    {
                        total += self.place(i + cur_piece + 1, piece + 1);
                    }
                }

                if self.spec.chars().nth(i) == Some('#') {
                    break;
                }
            }

            self.cache.insert((pos, piece), total);

            total
        }
    }
}

pub fn solve(input: &str) -> Solution<usize, usize> {
    let mut records: Vec<Record> = input
        .lines()
        .map(|line| {
            let parts: Vec<&str> = line.split_whitespace().collect();
            let spec = parts[0];
            let pieces: Vec<usize> = parts[1]
                .split(',')
                .filter_map(|s| s.parse::<usize>().ok())
                .collect();

            Record::new(spec.to_string(), pieces)
        })
        .collect();

    let part1: usize = records.iter_mut().map(|record| record.place(0, 0)).sum();

    let part2: usize = records
        .into_iter()
        .map(|record| {
            let spec_cloned: String = std::iter::repeat(record.spec)
                .take(5)
                .intersperse("?".to_string())
                .collect();
            let pieces_len = record.pieces.len();
            let pieces_cloned: Vec<usize> = record
                .pieces
                .into_iter()
                .cycle()
                .take(pieces_len * 5)
                .collect();

            Record::new(spec_cloned, pieces_cloned).place(0, 0)
        })
        .sum();

    Solution(part1, part2)
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_example() {
        assert!(
            super::Record::new("?#?#???.#??????.??".to_string(), vec![6, 1, 1, 2, 1]).place(0, 0)
                == 12
        );
    }
}
