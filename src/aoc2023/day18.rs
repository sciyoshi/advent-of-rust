// Generated by ChatGPT
// https://chat.openai.com/share/c0555c59-5c79-4b62-857c-a13ff45172cb

use crate::Solution;

fn calculate_lava_volume(dig_plan: &[(&str, i64)]) -> i64 {
    let mut coordinates = vec![(0.5, 0.5)]; // starting at the center of the initial 1m cube
    let (mut x, mut y) = (0.5, 0.5);

    // Parse the dig plan
    for &(direction, distance) in dig_plan {
        for _ in 0..distance {
            match direction {
                "U" => y -= 1.0,
                "D" => y += 1.0,
                "L" => x -= 1.0,
                "R" => x += 1.0,
                _ => {}
            }
            coordinates.push((x, y));
        }
    }

    // Calculate area using the shoelace formula
    let mut area: f64 = 0.0;
    for i in 0..coordinates.len() {
        let (x1, y1) = coordinates[i];
        let (x2, y2) = coordinates[(i + 1) % coordinates.len()];
        area += x1 * y2 - x2 * y1;
    }
    area = area.abs() / 2.0;

    // Adjust for cell centers
    area += coordinates.len() as f64 * 0.5;

    // Calculate volume (depth is 1 meter)
    (area * 1.0) as i64 + 1
}

pub fn solve(input: &str) -> Solution<usize, usize> {
    let plan1: Vec<(&str, i64)> = input
        .lines()
        .map(|line| {
            let parts: Vec<&str> = line.split_whitespace().collect();
            let direction = parts[0];
            let distance: i64 = parts[1].parse().unwrap();

            (direction, distance)
        })
        .collect();

    let plan2: Vec<(&str, i64)> = input
        .lines()
        .map(|line| {
            let parts: Vec<&str> = line.split_whitespace().collect();
            let hex = parts[2].trim_matches(|c| c == '(' || c == ')' || c == '#');
            let distance_str = &hex[..5]; // First 5 digits
            let direction_code = &hex[5..6]; // Last digit

            // Convert distance from hex to integer
            let distance = i64::from_str_radix(distance_str, 16)
                .map_err(|e| e.to_string())
                .unwrap();

            // Map direction code to direction
            let direction = match direction_code {
                "0" => "R",
                "1" => "D",
                "2" => "L",
                "3" => "U",
                _ => panic!("invalid"),
            };

            (direction, distance)
        })
        .collect();

    let part1 = calculate_lava_volume(&plan1);
    let part2 = calculate_lava_volume(&plan2);

    Solution(part1 as usize, part2 as usize)
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_example() {
        assert!(
            super::solve(include_str!("examples/day18.txt")) == crate::Solution(62, 952408144115)
        );
    }
}
